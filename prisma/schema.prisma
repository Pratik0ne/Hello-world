generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  REVIEWER
  ADMIN
}

enum CandidateStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  VERIFIED
  REWORK_REQUESTED
  REJECTED
}

model User {
  id            String           @id @default(cuid())
  name          String?
  email         String?          @unique
  emailVerified DateTime?
  image         String?
  role          UserRole         @default(USER)
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  accounts      Account[]
  sessions      Session[]
  candidate     CandidateProfile?
  reviewNotes   ReviewNote[]     @relation("ReviewerNotes")
}

model CandidateProfile {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [userId], references: [id])
  userId         String           @unique
  phone          String?
  yearsExp       Int?
  primaryCloud   String?
  tools          String[]         @default([])
  status         CandidateStatus  @default(DRAFT)
  proofScore     Int              @default(0)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  resumes        Resume[]
  portfolio      Portfolio?
  referee        Referee?
  reviewNotes    ReviewNote[]
}

model Resume {
  id          String           @id @default(cuid())
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id])
  candidateId String
  gcsKey      String
  fileType    String
  uploadedAt  DateTime         @default(now())
  archived    Boolean          @default(false)
}

model Portfolio {
  id          String           @id @default(cuid())
  candidate   CandidateProfile @relation(fields: [candidateId], references: [id])
  candidateId String           @unique
  kaggleUrl   String?
  blogUrl     String?
  siteUrl     String?
  updatedAt   DateTime         @updatedAt
  createdAt   DateTime         @default(now())
}

model Referee {
  id           String           @id @default(cuid())
  candidate    CandidateProfile @relation(fields: [candidateId], references: [id])
  candidateId  String           @unique
  email        String
  tokenHash    String
  verifiedAt   DateTime?
  requestedAt  DateTime         @default(now())
}

model ReviewNote {
  id           String           @id @default(cuid())
  candidate    CandidateProfile @relation(fields: [candidateId], references: [id])
  candidateId  String
  reviewer     User             @relation("ReviewerNotes", fields: [reviewerId], references: [id])
  reviewerId   String
  message      String
  createdAt    DateTime         @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String @unique
  expires    DateTime

  @@unique([identifier, token])
}
